name: Java CI with Maven

# Déclenche le workflow sur un push vers la branche master.
on:
  push:
    branches: [ "master" ] # Écoute les push sur la branche "master" uniquement.

# Définition des jobs à effectuer lors de l'exécution du workflow.
jobs:
  build-publication-image: # Identifiant du job, ici focalisé sur la construction et la publication d'une image Docker.

    # Spécifie l'OS sur lequel les jobs vont être exécutés.
    runs-on: ubuntu-latest # Utilise la dernière version d'Ubuntu disponible sur GitHub Actions.

    # Liste des étapes à effectuer dans ce job.
    steps:
      # Étape 1: Récupération du code sur le dépôt.
      - uses: actions/checkout@v3
        # Utilise l'action checkout pour cloner le code du dépôt.
    
      # Étape 2: Configuration de JDK 17.
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17' # Définit la version de Java à utiliser.
          distribution: 'temurin' # Spécifie la distribution Temurin d'Eclipse Adoptium.
          cache: maven # Active le cache pour Maven, accélérant les builds successifs.
      
      # Étape 3: Construction du projet avec Maven.
      - name: Build with Maven
        run: mvn -B package
        # Exécute Maven en mode batch pour compiler le projet et empaqueter les artefacts, ici un fichier .jar.

      # Étape 4: Enregistre l'artefact construit.
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v3.1.3
        with:
          name: "StrovoApi" # Nom sous lequel l'artefact est enregistré.
          path: target/*.jar # Chemin de l'artefact à enregistrer.

      # Étape 5: Construit et publie l'image Docker de cet artefact.
      - name: Build and push docker image
        uses: mr-smithers-excellent/docker-build-push@v6
        with:
          image: romaint1/strovo-api # Nom de l'image Docker à construire et publier.
          tags: latest # Tag de l'image Docker, ici "latest".
          platform: linux/arm64 # Plateforme cible de l'image Docker.
          registry: docker.io # Registre Docker où l'image sera publiée.
          username: ${{ secrets.DOCKERHUB_USERNAME }} # Nom d'utilisateur Docker Hub, stocké comme secret.
          password: ${{ secrets.DOCKERHUB_TOKEN }} # Token d'accès Docker Hub, également stocké comme secret.
