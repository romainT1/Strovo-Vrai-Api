name: Java CI with Maven

# Se déclenche lors d'un push sur la branche master ou lors d'une pull request vers cette même branche
on:
  push:
    branches: [ "master" ] # Déclenche le workflow lors d'un push sur la branche master
  pull_request:
    branches: [ "master" ] # Déclenche le workflow lors d'une pull request vers la branche master

# Définit les jobs à effectuer lors de l'exécution du workflow
jobs:
  analyse-code: # Nom du job, peut être n'importe quel identifiant unique

    # Spécifie l'OS sur lequel les jobs vont être exécutés
    runs-on: ubuntu-latest # Utilise la dernière version stable d'Ubuntu disponible

    # Liste des étapes à effectuer dans ce job
    steps:
      # Étape 1: Récupération du code sur le dépôt
      - uses: actions/checkout@v3 # Utilise l'action checkout pour récupérer le code du dépôt

      # Étape 2: Configuration de JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17' # Spécifie la version de Java à utiliser
          distribution: 'temurin' # Spécifie la distribution de Java
          cache: maven # Active le cache pour Maven afin d'accélérer les builds successifs

      # Étape 3: Construction du projet avec Maven
      - name: Build with Maven
        run: mvn -B package # Exécute Maven en mode batch (sans interaction) pour compiler le projet et empaqueter les artefacts

      # Étape 4: Génération du rapport JUnit
      - name: JUnit Report Action
        uses: mikepenz/action-junit-report@v4.0.3
        with:
          report_paths: 'target/surefire-reports/TEST-*.xml' # Spécifie l'emplacement des rapports de tests pour leur analyse et publication dans l'UI GitHub
